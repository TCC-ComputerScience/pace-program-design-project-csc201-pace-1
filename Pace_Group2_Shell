
// ************** PSEUDOCODE to develop a game called 'Battleship'. ************** //

//                                  PACE 2 GROUP
// Grahm Rusnak + Angel Mercado + Anthony Akintunde + Kobe Bills + Coleen Mercado

// Changes made by Pace 1 Group: Jennifer Xayyaraj, Alysha Morgan, Amonte Edwards
//                               Cameron Dallant, Alexander Bagtas

// ******************************************************************************* //

/**********Libraries**********/
#include <iostream>         // Allow C++ to read input and display output
#include <iomanip>          // Allow C++ to use setw
using namespace std;        // Use C++ standard library

// DECLARE VARIABLES
const int columnSize = 10;      // Array Column Size
const int rowSize = 10;         // Array Row Size
const char ocean = '~';
const char ship = '#';
const char HIT = 'H';
const char MISS = '.';

// A menu that allows the user to choose in the game
// Pre: variable choice has been declared
// Post: number has been chosen to begin/continue/quit game
void Menu(int &choice,char PlayingBoard[rowSize][columnSize], char Board[rowSize][columnSize]);

// Print out the board
// Pre: Must be numbers in the array to be printed
// Post:Print out the numbers in an array using a For loop
void DisplayBoard(char Board[rowSize][columnSize]);


// MAIN LOGIC
int main(){

    char Board[rowSize][columnSize];
    char PlayingBoard[rowSize][columnSize];
    int choice;


    Menu(choice,PlayingBoard,Board);
    DisplayBoard(Board);


// Loop through the game until user quits

    // GenerateBoard function - Call the function that generates a Battleship Board
        // loop through to add ocean and ships (do-while)
        // generate ocean 10-by-10 (for-loop)
            // loop through columns and store random numbers in Board
        // generate random ships (at least 5)
            // if-else statements

    // CleanBoard Function - Call the function that displays a Battleship Board
        //Loops through all the columns and stores a random number into Board


}

// ******************************************************************************* //



// FUNCTIONS :

// Create A random board with ocean and ships
//Pre: ocean and ship are declared
//Post: ocean and ships are randomly generated
void GenerateBoard(char Board[rowSize][columnSize]){
    cout << "In GenerateBoard...\n";
    // loop through to add ocean and ships (do-while)

    // generate ocean 10-by-10 (for-loop)
    // loop through columns and store random numbers in Board

    // generate random ships (at least 5)
        // if-else statements

}


// Print out the board
// Pre: Must be numbers in the array to be printed
// Post:Print out the numbers in an array using a For loop
void DisplayBoard(char Board[rowSize][columnSize]){
// Loops through all the rows (for-loop)
    // Loops through all the columns and outputs Board
    for (int i = 0; i <= 9; i++){
        //  Prints out ocean ~
        for(int j = 0; j <= 9; j++){
            cout << setw(4) << ocean;
        }
    cout << endl;
    }


}
// Assembles generated random numbers into place
// Pre: char clean is declared
// Post: outputs all x's as untouched before game
void CleanBoard(char PlayingBoard[rowSize][columnSize]){
//Loops through all the columns and stores a random number into Board
    cout << "In CleanBoard...\n";

}

// User picks the coordinates to guess where to hit
// Pre: xCoor, yCoor, and choice have been declared;
//      ChangeCoor allows to change coordinates if
//      user changed their mind.
// Post: With entered coordinates, user chooses between to
//       shoot or change coordinates.
void CoordinatePicker(char PlayingBoard[rowSize][columnSize], char Board[rowSize][columnSize]){
    cout << "In CoordinatePicker...\n";
// Loop xCoor and yCoor (do-while)
    // if xCoor = 0, x-coordinate has been chosen (true); else, invalid
    // if yCoor = 0, y-coordinate has been chosen (true); else, invalid
    // coordinates have been chosen, prompt user to 1-shoot or 2-change
        // if choice = 1, determine if HIT or MISS

}
// A menu that allows the user to choose in the game
// Pre: variable choice has been declared
// Post: number has been chosen to begin/continue/quit game
void Menu(int &choice,char PlayingBoard[rowSize][columnSize], char Board[rowSize][columnSize]){
// Change:
    // Deleted option 2, continue an unfinished game
    // Deleted option 3, user deletes all data and computer generates new game(?)
    // Deleted Loop through choices (while-loop)
// Prompt user to make a choice
cout << "Please make a selection: ";
cin >> choice;

        switch(choice){
        // if 1, user will play a new game
        case 1: //Call GenerateBoard(Board);
                GenerateBoard(Board);
                CoordinatePicker(PlayingBoard,Board);
                break;
        // if 2, user quits game
        case 2: cout << "You chose to end the game! Thanks for playing!\n";
                break;
        default: cout << "Invalid choice.\n";
                break;
        }

}

void DebugMenu(int &choice){
}

void intermission(){
}
